#!/usr/bin/env python
# coding:utf-8

# Simple data_fetcher from .bag record file

import rospy
from std_msgs.msg import *

import rosbag
import yaml


# wheel speed part
def callback_id(data):
    #rospy.loginfo('stamp id '+rospy.get_caller_id() + ' I heard %s', data)
    pass


def callback_stamp(data):
    #rospy.loginfo('stamp '+rospy.get_caller_id() + ' I heard %s', data)
    pass


# camera trigger part
trigger = []
trigger_timestamp = []
trigger_seq = []


def callback_trigger(data):
    trigger_timestamp.append(data.seq)
    trigger_seq.append(data.stamp.to_sec())
    trigger.append([data.stamp.to_sec(), data.seq])

    rospy.loginfo(data)


def listener():

    rospy.init_node('listener', anonymous=True)

    rospy.Subscriber('/camera_trigger', std_msgs.msg.Header, callback_trigger)

    #rospy.Subscriber('/velocity', std_msgs.msg.Float64MultiArray, callback_id)
    #rospy.Subscriber('/velocity_stamp', std_msgs.msg.Header, callback_stamp)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()


# main data fetcher
def fetcher():

    # open the bag file
    bag = rosbag.Bag('2016-12-16-14-38-25.bag')

    # get topics & types of the topic

    topics = bag.get_type_and_topic_info()[1].keys()

    print topics

    # imu output .m file
    # data variable prepare → write into the .m file
    # timestamp seconds from 1970.1.1 00:00  &   z_angular_speed

    imu_t = []

    imu_z_angular_speed = []

    for topic, msg, t in bag.read_messages(topics=[topics[1]]):
        # not t——bag time , should be the sensor time stamp,msg.header.stamp
        imu_t.append(msg.header.stamp.to_sec())
        imu_z_angular_speed.append(msg.angular_velocity.z)

    print len(imu_t)
    print len(imu_z_angular_speed)

    f_imu = open('MTi_Mtx_z_angular_velocity.m', 'w+')

    f_imu.writelines('MTi_Mtx_z_angular_velocity = [' + '\n')

    imu_line_num = 2

    for item_t, item_z in zip(imu_t, imu_z_angular_speed):

        # format(item_t,'.7f')可以保留小数精度，而str对大数会截成两位小数，小的数不会

        # second line to last -1 line
        if 1 < imu_line_num < len(imu_t)+1:
            f_imu.writelines(format(item_t, '.7f') + ',' + str(item_z) + ';' +'\n')
            imu_line_num += 1
            continue

        # the last line
        elif imu_line_num == len(imu_t)+1:
            f_imu.writelines(format(item_t, '.7f') + ',' + str(item_z) + '];')
            continue

    f_imu.close()

    # 接受处理好的velocity和trigger话题
    listener()

    print trigger


    # wheel_speed output .m file






    # trigger output .m file






    # close the bag file

    bag.close()


if __name__ == '__main__':
    try:
        fetcher()
    except rospy.ROSInterruptException:
        pass


